{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation To derive the governing equations of motion for a projectile, we start with Newton\u2019s second law in a vacuum (no air resistance). The motion occurs in two dimensions: horizontal (x) and vertical (y). The only force acting is gravity, with acceleration \\( g \\) , directed downward. Equations of Motion Horizontal motion : No acceleration, so: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ where \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, and \\( t \\) is time. - Vertical motion : Acceleration is \\( -g \\) , so: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Solving for Time of Flight The projectile returns to the ground when \\( y(t) = 0 \\) : $$ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Factorizing: $$ t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\( t = 0 \\) (launch) or: $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This is the time of flight. Range Equation Substitute the time of flight into the horizontal equation: $$ R = x\\left(\\frac{2 v_0 \\sin(\\theta)}{g}\\right) = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} = \\frac{2 v_0^2 \\sin(\\theta) \\cos(\\theta)}{g} $$ Using the trigonometric identity \\( \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This is the range as a function of the angle of projection. Different initial conditions ( \\( v_0 \\) , \\( g \\) ) yield a family of solutions, scaling the range accordingly. 2. Analysis of the Range The range \\( R \\) depends on \\( \\theta \\) through \\( \\sin(2\\theta) \\) : - \\( R \\) is maximized when \\( \\sin(2\\theta) = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) , so \\( \\theta = 45^\\circ \\) . - \\( R = 0 \\) when \\( \\sin(2\\theta) = 0 \\) , i.e., \\( \\theta = 0^\\circ \\) or \\( 90^\\circ \\) . - The relationship is symmetric about \\( 45^\\circ \\) (e.g., \\( \\theta = 30^\\circ \\) and \\( 60^\\circ \\) give the same range). Influence of Other Parameters Initial Velocity ( \\( v_0 \\) ) : \\( R \\propto v_0^2 \\) , so doubling \\( v_0 \\) quadruples the range. Gravitational Acceleration ( \\( g \\) ) : \\( R \\propto 1/g \\) , so a smaller \\( g \\) (e.g., on the Moon) increases the range. 3. Practical Applications This model assumes a flat surface and no air resistance, but it can be adapted: - Uneven Terrain : Adjust the landing height in the vertical equation, solving for \\( t \\) when \\( y(t) = h \\) . This complicates the range formula. - Air Resistance : Introduce a drag force proportional to velocity (e.g., \\( F_d = -k v \\) ), turning the equations into nonlinear differential equations, typically solved numerically. - Real-World Examples : Artillery, sports (e.g., golf, soccer), or space launches (with modified \\( g \\) ). import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # gravitational acceleration (m/s^2) Function to calculate range def calculate_range(v0, theta_deg): theta_rad = np.radians(theta_deg) # Convert degrees to radians R = (v0**2 * np.sin(2 * theta_rad)) / g return R Angles from 0 to 90 degrees theta = np.linspace(0, 90, 181) # 181 points for smooth curve Different initial velocities v0_values = [10, 20, 30] # m/s Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: R = calculate_range(v0, theta) plt.plot(theta, R, label=f'v0 = {v0} m/s') Formatting the plot plt.title('Range vs Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"To derive the governing equations of motion for a projectile, we start with Newton\u2019s second law in a vacuum (no air resistance). The motion occurs in two dimensions: horizontal (x) and vertical (y). The only force acting is gravity, with acceleration \\( g \\) , directed downward.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"Horizontal motion : No acceleration, so: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ where \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, and \\( t \\) is time. - Vertical motion : Acceleration is \\( -g \\) , so: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solving-for-time-of-flight","text":"The projectile returns to the ground when \\( y(t) = 0 \\) : $$ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Factorizing: $$ t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\( t = 0 \\) (launch) or: $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This is the time of flight.","title":"Solving for Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"Substitute the time of flight into the horizontal equation: $$ R = x\\left(\\frac{2 v_0 \\sin(\\theta)}{g}\\right) = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} = \\frac{2 v_0^2 \\sin(\\theta) \\cos(\\theta)}{g} $$ Using the trigonometric identity \\( \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This is the range as a function of the angle of projection. Different initial conditions ( \\( v_0 \\) , \\( g \\) ) yield a family of solutions, scaling the range accordingly.","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\( R \\) depends on \\( \\theta \\) through \\( \\sin(2\\theta) \\) : - \\( R \\) is maximized when \\( \\sin(2\\theta) = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) , so \\( \\theta = 45^\\circ \\) . - \\( R = 0 \\) when \\( \\sin(2\\theta) = 0 \\) , i.e., \\( \\theta = 0^\\circ \\) or \\( 90^\\circ \\) . - The relationship is symmetric about \\( 45^\\circ \\) (e.g., \\( \\theta = 30^\\circ \\) and \\( 60^\\circ \\) give the same range).","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-other-parameters","text":"Initial Velocity ( \\( v_0 \\) ) : \\( R \\propto v_0^2 \\) , so doubling \\( v_0 \\) quadruples the range. Gravitational Acceleration ( \\( g \\) ) : \\( R \\propto 1/g \\) , so a smaller \\( g \\) (e.g., on the Moon) increases the range.","title":"Influence of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model assumes a flat surface and no air resistance, but it can be adapted: - Uneven Terrain : Adjust the landing height in the vertical equation, solving for \\( t \\) when \\( y(t) = h \\) . This complicates the range formula. - Air Resistance : Introduce a drag force proportional to velocity (e.g., \\( F_d = -k v \\) ), turning the equations into nonlinear differential equations, typically solved numerically. - Real-World Examples : Artillery, sports (e.g., golf, soccer), or space launches (with modified \\( g \\) ). import numpy as np import matplotlib.pyplot as plt","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # gravitational acceleration (m/s^2)","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-calculate-range","text":"def calculate_range(v0, theta_deg): theta_rad = np.radians(theta_deg) # Convert degrees to radians R = (v0**2 * np.sin(2 * theta_rad)) / g return R","title":"Function to calculate range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#angles-from-0-to-90-degrees","text":"theta = np.linspace(0, 90, 181) # 181 points for smooth curve","title":"Angles from 0 to 90 degrees"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-initial-velocities","text":"v0_values = [10, 20, 30] # m/s","title":"Different initial velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plotting","text":"plt.figure(figsize=(10, 6)) for v0 in v0_values: R = calculate_range(v0, theta) plt.plot(theta, R, label=f'v0 = {v0} m/s')","title":"Plotting"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#formatting-the-plot","text":"plt.title('Range vs Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Formatting the plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Motivation The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping, restoring forces, and external driving forces. By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including resonance, chaos, and quasiperiodic behavior. These phenomena serve as a foundation for understanding complex real-world systems, such as driven oscillators, climate systems, and mechanical structures under periodic stress. Adding forcing introduces new parameters, such as the amplitude and frequency of the external force, which significantly affect the pendulum's behavior. By systematically varying these parameters, a diverse class of solutions can be observed, including synchronized oscillations, chaotic motion, and resonance phenomena. These behaviors not only highlight fundamental physics principles but also provide insights into engineering applications such as energy harvesting, vibration isolation, and mechanical resonance. : Theoretical Foundation Differential Equation The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin(\\theta) = F\\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient (s\u207b\u00b9) - \\(g\\) : Gravitational acceleration (m/s\u00b2) - \\(L\\) : Pendulum length (m) - \\(F\\) : Driving force amplitude (s\u207b\u00b2) - \\(\\omega\\) : Driving frequency (rad/s) Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2\\theta = F\\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. This is a linear second-order differential equation with a harmonic forcing term. General Solution The general solution to this differential equation consists of two parts: 1. Homogeneous solution (transient response): $$ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) $$ where \\(\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\) . Particular solution (steady-state response): $$ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) $$ where $$ A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} $$ and $$ \\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right). $$ Resonance Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . For light damping ( \\(b \\ll \\omega_0\\) ), the amplitude \\(A_p\\) peaks sharply near \\(\\omega = \\omega_0\\) , amplifying the system's energy significantly. Analysis of Dynamics Parameter Effects Damping Coefficient (b): Higher \\(b\\) reduces oscillation amplitude and suppresses chaos, stabilizing the system. Driving Amplitude (F): Larger \\(F\\) can push the system from periodic to chaotic motion. Driving Frequency ( \\(\\omega\\) ): Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , the system may exhibit quasiperiodic or chaotic behavior. Transition to Chaos For large \\(F\\) or specific \\(\\omega\\) , the nonlinear term \\(\\sin(\\theta)\\) dominates, leading to chaotic motion. This transition is evident in phase portraits and Poincar\u00e9 sections, where trajectories shift from closed loops (periodic) to scattered points (chaotic). Practical Applications Energy Harvesting: Oscillatory motion in forced pendulums can be converted to electrical energy. Suspension Bridges: Damping and forcing model wind-induced vibrations. Oscillating Circuits: Analogous to driven RLC circuits, where resonance and damping play similar roles. Implementation Below is a Python script simulating the forced damped pendulum using the 4th-order Runge-Kutta (RK4) method. It includes visualizations of motion, phase portraits, and Poincar\u00e9 sections. Parameters Gravitational acceleration: \\[ g = 9.81 \\text{ m/s}^2 \\] Pendulum length: \\[ L = 1.0 \\text{ m} \\] Damping coefficient: \\[ b = 0.5 \\text{ s}^{-1} \\] Driving amplitude: \\[ F = 1.2 \\text{ s}^{-2} \\] Driving frequency: \\[ \\omega = \\frac{2}{3} \\text{ rad/s} \\] Natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] Differential Equation The equation governing the forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\] Differential Equation and Simulation The forced damped pendulum follows the equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\] import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Damped forced pendulum differential equation. import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Computes the derivatives for the forced damped pendulum. Parameters: state (tuple): (theta, theta_dot) t (float): time b (float): damping coefficient omega_0 (float): natural frequency F (float): forcing amplitude omega (float): forcing frequency Returns: tuple: (dtheta_dt, dtheta_dot_dt) \"\"\" theta, theta_dot = state dtheta_dt = theta_dot # Angular velocity dtheta_dot_dt = -b * theta_dot - omega_0**2 * np.sin(theta) + F * np.cos(omega * t) return dtheta_dt, dtheta_dot_dt Example usage (and showcasing the equation): The forced damped pendulum follows the equation: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) $$ where: - theta is the angle of the pendulum - b is the damping coefficient - omega_0 is the natural frequency - F is the forcing amplitude - omega is the forcing frequency - t is time. Example parameters: b = 0.25 omega_0 = 1.0 F = 0.3 omega = 1.5 Example initial conditions: initial_state = (np.pi / 4, 0.0) # (theta, theta_dot) Example time: t = 0.0 Example derivative calculation: dtheta_dt, dtheta_dot_dt = pendulum_deriv(initial_state, t, b, omega_0, F, omega) print(f\"dtheta/dt: {dtheta_dt}\") print(f\"d^2theta/dt^2: {dtheta_dot_dt}\")","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping, restoring forces, and external driving forces. By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including resonance, chaos, and quasiperiodic behavior. These phenomena serve as a foundation for understanding complex real-world systems, such as driven oscillators, climate systems, and mechanical structures under periodic stress. Adding forcing introduces new parameters, such as the amplitude and frequency of the external force, which significantly affect the pendulum's behavior. By systematically varying these parameters, a diverse class of solutions can be observed, including synchronized oscillations, chaotic motion, and resonance phenomena. These behaviors not only highlight fundamental physics principles but also provide insights into engineering applications such as energy harvesting, vibration isolation, and mechanical resonance.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"","title":": Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin(\\theta) = F\\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient (s\u207b\u00b9) - \\(g\\) : Gravitational acceleration (m/s\u00b2) - \\(L\\) : Pendulum length (m) - \\(F\\) : Driving force amplitude (s\u207b\u00b2) - \\(\\omega\\) : Driving frequency (rad/s)","title":"Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2\\theta = F\\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. This is a linear second-order differential equation with a harmonic forcing term.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#general-solution","text":"The general solution to this differential equation consists of two parts: 1. Homogeneous solution (transient response): $$ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) $$ where \\(\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\) . Particular solution (steady-state response): $$ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) $$ where $$ A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} $$ and $$ \\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right). $$","title":"General Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . For light damping ( \\(b \\ll \\omega_0\\) ), the amplitude \\(A_p\\) peaks sharply near \\(\\omega = \\omega_0\\) , amplifying the system's energy significantly.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"","title":"Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping Coefficient (b): Higher \\(b\\) reduces oscillation amplitude and suppresses chaos, stabilizing the system. Driving Amplitude (F): Larger \\(F\\) can push the system from periodic to chaotic motion. Driving Frequency ( \\(\\omega\\) ): Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , the system may exhibit quasiperiodic or chaotic behavior.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"For large \\(F\\) or specific \\(\\omega\\) , the nonlinear term \\(\\sin(\\theta)\\) dominates, leading to chaotic motion. This transition is evident in phase portraits and Poincar\u00e9 sections, where trajectories shift from closed loops (periodic) to scattered points (chaotic).","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Energy Harvesting: Oscillatory motion in forced pendulums can be converted to electrical energy. Suspension Bridges: Damping and forcing model wind-induced vibrations. Oscillating Circuits: Analogous to driven RLC circuits, where resonance and damping play similar roles.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implementation","text":"Below is a Python script simulating the forced damped pendulum using the 4th-order Runge-Kutta (RK4) method. It includes visualizations of motion, phase portraits, and Poincar\u00e9 sections.","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"Gravitational acceleration: \\[ g = 9.81 \\text{ m/s}^2 \\] Pendulum length: \\[ L = 1.0 \\text{ m} \\] Damping coefficient: \\[ b = 0.5 \\text{ s}^{-1} \\] Driving amplitude: \\[ F = 1.2 \\text{ s}^{-2} \\] Driving frequency: \\[ \\omega = \\frac{2}{3} \\text{ rad/s} \\] Natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\]","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation_1","text":"The equation governing the forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\]","title":"Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation-and-simulation","text":"The forced damped pendulum follows the equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\] import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Damped forced pendulum differential equation. import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Computes the derivatives for the forced damped pendulum. Parameters: state (tuple): (theta, theta_dot) t (float): time b (float): damping coefficient omega_0 (float): natural frequency F (float): forcing amplitude omega (float): forcing frequency Returns: tuple: (dtheta_dt, dtheta_dot_dt) \"\"\" theta, theta_dot = state dtheta_dt = theta_dot # Angular velocity dtheta_dot_dt = -b * theta_dot - omega_0**2 * np.sin(theta) + F * np.cos(omega * t) return dtheta_dt, dtheta_dot_dt","title":"Differential Equation and Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-usage-and-showcasing-the-equation","text":"","title":"Example usage (and showcasing the equation):"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#the-forced-damped-pendulum-follows-the-equation","text":"","title":"The forced damped pendulum follows the equation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#fracd2thetadt2-b-fracdthetadt-omega_02-sintheta-f-cosomega-t","text":"","title":"$$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) $$"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#where","text":"","title":"where:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-theta-is-the-angle-of-the-pendulum","text":"","title":"- theta is the angle of the pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-b-is-the-damping-coefficient","text":"","title":"- b is the damping coefficient"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-omega_0-is-the-natural-frequency","text":"","title":"- omega_0 is the natural frequency"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-f-is-the-forcing-amplitude","text":"","title":"- F is the forcing amplitude"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-omega-is-the-forcing-frequency","text":"","title":"- omega is the forcing frequency"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-t-is-time","text":"","title":"- t is time."},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-parameters","text":"b = 0.25 omega_0 = 1.0 F = 0.3 omega = 1.5","title":"Example parameters:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-initial-conditions","text":"initial_state = (np.pi / 4, 0.0) # (theta, theta_dot)","title":"Example initial conditions:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-time","text":"t = 0.0","title":"Example time:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-derivative-calculation","text":"dtheta_dt, dtheta_dot_dt = pendulum_deriv(initial_state, t, b, omega_0, F, omega) print(f\"dtheta/dt: {dtheta_dt}\") print(f\"d^2theta/dt^2: {dtheta_dot_dt}\")","title":"Example derivative calculation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius Motivation Kepler's Third Law states that the square of the orbital period (T) of a planet is proportional to the cube of the semi-major axis (r) of its orbit. Mathematically: \\[ T^2 \\propto r^3 \\] This relationship is fundamental in celestial mechanics, allowing astronomers to determine planetary motions, masses, and distances within the solar system and beyond. Mathematical Derivation Using Newton's law of gravitation and centripetal force: \\[ F = \\frac{G M m}{r^2} $$ $$ F = \\frac{m v^2}{r} \\] Equating both forces: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Since orbital velocity is given by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\frac{G M}{r^2} = \\frac{(2\\pi r / T)^2}{r} \\] Rearranging: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This confirms Kepler's Third Law. Python Simulation Below is a Python script to simulate circular orbits and verify Kepler\u2019s Third Law using numerical integration. ```python import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants M = 1.989e30 # Mass of Sun (kg) AU = 1.496e11 # Astronomical Unit (m) T_Earth = 365.25 * 24 * 3600 # Orbital period of Earth (s) # Orbital Radii (in AU converted to meters) radii = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.2, 30.1]) * AU # Compute theoretical periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to Earth years periods_years = periods / T_Earth # Plot results plt.figure(figsize=(8,6)) plt.loglog(radii/AU, periods_years, 'o-', label=\"Planets\") plt.xlabel(\"Orbital Radius (AU)\") plt.ylabel(\"Orbital Period (Earth Years)\") plt.title(\"Kepler's Third Law: T^2 vs R^3\") plt.grid(True, which=\"both\", linestyle=\"--\", alpha=0.6) plt.legend() plt.show() ```markdown Discussion The log-log plot of orbital period vs. radius confirms the cubic relationship of Kepler\u2019s law. This law is essential for calculating planetary masses, distances, and even predicting exoplanetary systems. For elliptical orbits, the semi-major axis replaces the orbital radius in the equation. Kepler\u2019s laws also play a critical role in understanding satellite orbits and space mission planning. Conclusion Kepler\u2019s Third Law is a fundamental principle that provides deep insights into celestial mechanics. Our computational simulation confirms the theoretical relationship and demonstrates its practical application in astronomy.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law states that the square of the orbital period (T) of a planet is proportional to the cube of the semi-major axis (r) of its orbit. Mathematically: \\[ T^2 \\propto r^3 \\] This relationship is fundamental in celestial mechanics, allowing astronomers to determine planetary motions, masses, and distances within the solar system and beyond.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#mathematical-derivation","text":"Using Newton's law of gravitation and centripetal force: \\[ F = \\frac{G M m}{r^2} $$ $$ F = \\frac{m v^2}{r} \\] Equating both forces: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Since orbital velocity is given by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\frac{G M}{r^2} = \\frac{(2\\pi r / T)^2}{r} \\] Rearranging: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This confirms Kepler's Third Law.","title":"Mathematical Derivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation","text":"Below is a Python script to simulate circular orbits and verify Kepler\u2019s Third Law using numerical integration. ```python import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants M = 1.989e30 # Mass of Sun (kg) AU = 1.496e11 # Astronomical Unit (m) T_Earth = 365.25 * 24 * 3600 # Orbital period of Earth (s) # Orbital Radii (in AU converted to meters) radii = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.2, 30.1]) * AU # Compute theoretical periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to Earth years periods_years = periods / T_Earth # Plot results plt.figure(figsize=(8,6)) plt.loglog(radii/AU, periods_years, 'o-', label=\"Planets\") plt.xlabel(\"Orbital Radius (AU)\") plt.ylabel(\"Orbital Period (Earth Years)\") plt.title(\"Kepler's Third Law: T^2 vs R^3\") plt.grid(True, which=\"both\", linestyle=\"--\", alpha=0.6) plt.legend() plt.show() ```markdown","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#discussion","text":"The log-log plot of orbital period vs. radius confirms the cubic relationship of Kepler\u2019s law. This law is essential for calculating planetary masses, distances, and even predicting exoplanetary systems. For elliptical orbits, the semi-major axis replaces the orbital radius in the equation. Kepler\u2019s laws also play a critical role in understanding satellite orbits and space mission planning.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler\u2019s Third Law is a fundamental principle that provides deep insights into celestial mechanics. Our computational simulation confirms the theoretical relationship and demonstrates its practical application in astronomy.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities Introduction The concept of escape velocity is fundamental in astrophysics and space exploration. It refers to the minimum speed an object must reach to break free from a celestial body's gravitational pull without any additional propulsion. The first, second, and third cosmic velocities extend this idea, defining the speeds required for different types of space travel: orbiting a planet, escaping its gravitational influence, and leaving a star system. Definitions of Cosmic Velocities First Cosmic Velocity (Orbital Velocity) : This is the speed required for an object to maintain a stable orbit around a celestial body. It is given by the formula: $$ v_1 = \\sqrt{\\frac{GM}{R}} $$ where: \\( G \\) = gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ) \\( M \\) = mass of the celestial body \\( R \\) = radius of the celestial body Second Cosmic Velocity (Escape Velocity) : This is the speed needed to break free from the gravitational influence of a celestial body. It is calculated as: $$ v_2 = \\sqrt{\\frac{2GM}{R}} $$ Third Cosmic Velocity (Heliocentric Escape Velocity) : This is the speed required to escape the gravitational influence of a star (like the Sun) from a planet's surface. It is given by: $$ v_3 = \\sqrt{v_2^2 + v_{orb}^2} $$ where \\( v_{orb} \\) is the orbital velocity of the planet around the star. Mathematical Derivations and Parameters The escape and cosmic velocities depend on the mass and radius of the celestial body. The gravitational constant \\( G \\) is a universal constant. The velocities can be derived from the principles of energy conservation, where the kinetic energy of the object must equal the gravitational potential energy at the surface of the celestial body. Calculations for Different Celestial Bodies Let's calculate and visualize these velocities for Earth, Mars, and Jupiter using Python. Python Script ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.674 * 10**-11 # gravitational constant in m^3 kg^-1 s^-2 cost_per_m_s = 1000 # Cost in dollars per m/s Celestial bodies data: (name, mass in kg, radius in meters) celestial_bodies = { 'Earth': (5.972e24, 6.371e6), 'Mars': (6.417e23, 3.3895e6), 'Jupiter': (1.898e27, 6.9911e7) } Function to calculate cosmic velocities def calculate_velocities(mass, radius): v1 = np.sqrt(G * mass / radius) # First cosmic velocity v2 = np.sqrt(2 * G * mass / radius) # Second cosmic velocity return v1, v2 Store results results = {} for body, (mass, radius) in celestial_bodies.items(): v1, v2 = calculate_velocities(mass, radius) v3 = np.sqrt(v2 2 + (np.sqrt(G * mass / radius)) 2) # Third cosmic velocity results[body] = (v1, v2, v3) Visualization labels = list(results.keys()) v1_values = [results[body][0] for body in labels] v2_values = [results[body][1] for body in labels] v3_values = [results[body][2] for body in labels] Calculate costs in dollars v1_costs = [v * cost_per_m_s for v in v1_values] v2_costs = [v * cost_per_m_s for v in v2_values] v3_costs = [v * cost_per_m_s for v in v3_values] x = np.arange(len(labels)) plt.figure(figsize=(12, 8)) Plot velocities plt.subplot(2, 1, 1) plt.bar(x - 0.2, v1_values, width=0.2, label='First Cosmic Velocity (m/s)', color='blue') plt.bar(x, v2_values, width=0.2, label='Second Cosmic Velocity (m/s)', color='orange') plt.bar(x + 0.2, v3_values, width=","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#introduction","text":"The concept of escape velocity is fundamental in astrophysics and space exploration. It refers to the minimum speed an object must reach to break free from a celestial body's gravitational pull without any additional propulsion. The first, second, and third cosmic velocities extend this idea, defining the speeds required for different types of space travel: orbiting a planet, escaping its gravitational influence, and leaving a star system.","title":"Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions-of-cosmic-velocities","text":"First Cosmic Velocity (Orbital Velocity) : This is the speed required for an object to maintain a stable orbit around a celestial body. It is given by the formula: $$ v_1 = \\sqrt{\\frac{GM}{R}} $$ where: \\( G \\) = gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ) \\( M \\) = mass of the celestial body \\( R \\) = radius of the celestial body Second Cosmic Velocity (Escape Velocity) : This is the speed needed to break free from the gravitational influence of a celestial body. It is calculated as: $$ v_2 = \\sqrt{\\frac{2GM}{R}} $$ Third Cosmic Velocity (Heliocentric Escape Velocity) : This is the speed required to escape the gravitational influence of a star (like the Sun) from a planet's surface. It is given by: $$ v_3 = \\sqrt{v_2^2 + v_{orb}^2} $$ where \\( v_{orb} \\) is the orbital velocity of the planet around the star.","title":"Definitions of Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mathematical-derivations-and-parameters","text":"The escape and cosmic velocities depend on the mass and radius of the celestial body. The gravitational constant \\( G \\) is a universal constant. The velocities can be derived from the principles of energy conservation, where the kinetic energy of the object must equal the gravitational potential energy at the surface of the celestial body.","title":"Mathematical Derivations and Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculations-for-different-celestial-bodies","text":"Let's calculate and visualize these velocities for Earth, Mars, and Jupiter using Python.","title":"Calculations for Different Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-script","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"Python Script"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.674 * 10**-11 # gravitational constant in m^3 kg^-1 s^-2 cost_per_m_s = 1000 # Cost in dollars per m/s","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-bodies-data-name-mass-in-kg-radius-in-meters","text":"celestial_bodies = { 'Earth': (5.972e24, 6.371e6), 'Mars': (6.417e23, 3.3895e6), 'Jupiter': (1.898e27, 6.9911e7) }","title":"Celestial bodies data: (name, mass in kg, radius in meters)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#function-to-calculate-cosmic-velocities","text":"def calculate_velocities(mass, radius): v1 = np.sqrt(G * mass / radius) # First cosmic velocity v2 = np.sqrt(2 * G * mass / radius) # Second cosmic velocity return v1, v2","title":"Function to calculate cosmic velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#store-results","text":"results = {} for body, (mass, radius) in celestial_bodies.items(): v1, v2 = calculate_velocities(mass, radius) v3 = np.sqrt(v2 2 + (np.sqrt(G * mass / radius)) 2) # Third cosmic velocity results[body] = (v1, v2, v3)","title":"Store results"},{"location":"1%20Physics/2%20Gravity/Problem_2/#visualization","text":"labels = list(results.keys()) v1_values = [results[body][0] for body in labels] v2_values = [results[body][1] for body in labels] v3_values = [results[body][2] for body in labels]","title":"Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculate-costs-in-dollars","text":"v1_costs = [v * cost_per_m_s for v in v1_values] v2_costs = [v * cost_per_m_s for v in v2_values] v3_costs = [v * cost_per_m_s for v in v3_values] x = np.arange(len(labels)) plt.figure(figsize=(12, 8))","title":"Calculate costs in dollars"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plot-velocities","text":"plt.subplot(2, 1, 1) plt.bar(x - 0.2, v1_values, width=0.2, label='First Cosmic Velocity (m/s)', color='blue') plt.bar(x, v2_values, width=0.2, label='Second Cosmic Velocity (m/s)', color='orange') plt.bar(x + 0.2, v3_values, width=","title":"Plot velocities"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of a Freely Released Payload Near Earth Introduction When an object is released from a moving rocket near Earth, its trajectory depends on initial conditions and gravitational forces. This scenario presents a rich problem, blending principles of orbital mechanics and numerical methods. Understanding the potential trajectories is vital for space missions, such as deploying payloads or returning objects to Earth. Possible Trajectories The trajectories of a payload released near Earth can be classified into three main types based on the object's energy and velocity: Elliptical Trajectory : Occurs when the total mechanical energy of the payload is negative. This trajectory is characteristic of objects in stable orbits around Earth. Parabolic Trajectory : Occurs when the total mechanical energy is zero. This trajectory represents the boundary between bound (elliptical) and unbound (hyperbolic) orbits. Hyperbolic Trajectory : Occurs when the total mechanical energy is positive. This trajectory indicates that the payload has enough velocity to escape Earth's gravitational influence. Numerical Analysis To compute the path of the payload based on given initial conditions (position, velocity, and altitude), we can use Newton's Law of Gravitation and numerical methods to simulate the motion under Earth's gravity. Equations of Motion The gravitational force acting on the payload can be described by Newton's Law of Gravitation: $$ F = \\frac{GMm}{r^2} $$ where: - \\( F \\) = gravitational force - \\( G \\) = gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ) - \\( M \\) = mass of the Earth ( \\(5.972 \\times 10^{24} \\, \\text{kg}\\) ) - \\( m \\) = mass of the payload - \\( r \\) = distance from the center of the Earth to the payload The equations of motion can be derived from this force, leading to a system of differential equations that can be solved numerically. Python Script Below is a Python script that simulates the motion of a payload released near Earth, accounting for initial velocities and directions. ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Constants G = 6.674 * 10 -11 # gravitational constant in m^3 kg^-1 s^-2 M = 5.972 * 10 24 # mass of the Earth in kg R = 6.371 * 10**6 # radius of the Earth in meters Function to compute the derivatives def derivatives(t, y): x, y_pos, vx, vy = y r = np.sqrt(x 2 + y_pos 2) # distance from the center of the Earth ax = -G * M * x / r 3 # acceleration in x ay = -G * M * y_pos / r 3 # acceleration in y return [vx, vy, ax, ay] Initial conditions initial_position = [R + 1000, 0] # 1000 meters above the Earth's surface initial_velocity = [0, 500] # initial velocity in m/s (horizontal) initial_conditions = initial_position + initial_velocity Time span for the simulation t_span = (0, 200) # seconds t_eval = np.linspace(t_span[0], t_span[1], 500) # time points Solve the differential equations solution = solve_ivp(derivatives, t_span, initial_conditions, t_eval=t_eval) Extract the results x = solution.y[0] y = solution.y[1] Plotting the trajectory plt.figure(figsize=(10, 6)) plt.plot(x, y, label='Payload Trajectory') plt.plot(0, 0, 'ro', markersize=10, label='Earth') # Earth at the origin plt.xlim(-1.5e7, 1.5e7) plt.ylim(-1.5e7, 1.5e7) plt.xlabel('X Position (m)') plt.ylabel('Y Position (m)') plt.title('Trajectory of a Freely Released Payload Near Earth') plt.axhline(0, color='black', lw=0.5, ls='--') plt.axvline(0, color='black', lw=0.5, ls='--') plt.grid() plt.legend() plt.axis('equal') plt.show()","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#introduction","text":"When an object is released from a moving rocket near Earth, its trajectory depends on initial conditions and gravitational forces. This scenario presents a rich problem, blending principles of orbital mechanics and numerical methods. Understanding the potential trajectories is vital for space missions, such as deploying payloads or returning objects to Earth.","title":"Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_3/#possible-trajectories","text":"The trajectories of a payload released near Earth can be classified into three main types based on the object's energy and velocity: Elliptical Trajectory : Occurs when the total mechanical energy of the payload is negative. This trajectory is characteristic of objects in stable orbits around Earth. Parabolic Trajectory : Occurs when the total mechanical energy is zero. This trajectory represents the boundary between bound (elliptical) and unbound (hyperbolic) orbits. Hyperbolic Trajectory : Occurs when the total mechanical energy is positive. This trajectory indicates that the payload has enough velocity to escape Earth's gravitational influence.","title":"Possible Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#numerical-analysis","text":"To compute the path of the payload based on given initial conditions (position, velocity, and altitude), we can use Newton's Law of Gravitation and numerical methods to simulate the motion under Earth's gravity.","title":"Numerical Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion","text":"The gravitational force acting on the payload can be described by Newton's Law of Gravitation: $$ F = \\frac{GMm}{r^2} $$ where: - \\( F \\) = gravitational force - \\( G \\) = gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ) - \\( M \\) = mass of the Earth ( \\(5.972 \\times 10^{24} \\, \\text{kg}\\) ) - \\( m \\) = mass of the payload - \\( r \\) = distance from the center of the Earth to the payload The equations of motion can be derived from this force, leading to a system of differential equations that can be solved numerically.","title":"Equations of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-script","text":"Below is a Python script that simulates the motion of a payload released near Earth, accounting for initial velocities and directions. ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"Python Script"},{"location":"1%20Physics/2%20Gravity/Problem_3/#constants","text":"G = 6.674 * 10 -11 # gravitational constant in m^3 kg^-1 s^-2 M = 5.972 * 10 24 # mass of the Earth in kg R = 6.371 * 10**6 # radius of the Earth in meters","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_3/#function-to-compute-the-derivatives","text":"def derivatives(t, y): x, y_pos, vx, vy = y r = np.sqrt(x 2 + y_pos 2) # distance from the center of the Earth ax = -G * M * x / r 3 # acceleration in x ay = -G * M * y_pos / r 3 # acceleration in y return [vx, vy, ax, ay]","title":"Function to compute the derivatives"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions","text":"initial_position = [R + 1000, 0] # 1000 meters above the Earth's surface initial_velocity = [0, 500] # initial velocity in m/s (horizontal) initial_conditions = initial_position + initial_velocity","title":"Initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#time-span-for-the-simulation","text":"t_span = (0, 200) # seconds t_eval = np.linspace(t_span[0], t_span[1], 500) # time points","title":"Time span for the simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#solve-the-differential-equations","text":"solution = solve_ivp(derivatives, t_span, initial_conditions, t_eval=t_eval)","title":"Solve the differential equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#extract-the-results","text":"x = solution.y[0] y = solution.y[1]","title":"Extract the results"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plotting-the-trajectory","text":"plt.figure(figsize=(10, 6)) plt.plot(x, y, label='Payload Trajectory') plt.plot(0, 0, 'ro', markersize=10, label='Earth') # Earth at the origin plt.xlim(-1.5e7, 1.5e7) plt.ylim(-1.5e7, 1.5e7) plt.xlabel('X Position (m)') plt.ylabel('Y Position (m)') plt.title('Trajectory of a Freely Released Payload Near Earth') plt.axhline(0, color='black', lw=0.5, ls='--') plt.axvline(0, color='black', lw=0.5, ls='--') plt.grid() plt.legend() plt.axis('equal') plt.show()","title":"Plotting the trajectory"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 Interference Patterns on a Water Surface Motivation Interference occurs when waves from different sources overlap, creating new patterns. On a water surface, this can be easily observed when ripples from different points meet, forming distinctive interference patterns. These patterns can show us how waves combine in different ways, either reinforcing each other or canceling out. Studying these patterns helps us understand wave behavior in a simple, visual way. It also allows us to explore important concepts, like the relationship between wave phase and the effects of multiple sources. This task offers a hands-on approach to learning about wave interactions and their real-world applications, making it an interesting and engaging way to dive into wave physics. Task Select a Regular Polygon Choose a regular polygon (e.g., equilateral triangle, square, regular pentagon). Position the Sources Place point wave sources at the vertices of the selected polygon. Wave Equations The displacement of the water surface at point \\((x, y)\\) and time \\(t\\) can be described by the wave equation: $$ \\eta(x,y,t) = \\frac{A}{\\sqrt{r}} \\cdot \\cos{(kr - \\omega t + \\phi)} $$ where: - \\(D(x, y, t)\\) = displacement of the water surface at point \\((x, y)\\) and time \\(t\\) - \\(A\\) = amplitude of the wave - \\(k\\) = wave number, related to the wavelength \\(\\lambda\\) by \\(k = \\frac{2\\pi}{\\lambda}\\) - \\(\\omega\\) = angular frequency, related to the frequency \\(f\\) by \\(\\omega = 2\\pi f\\) - \\(r\\) = distance from the source to the point \\((x, y)\\) - \\(\\phi\\) = initial phase Superposition of Waves The total displacement \\(D_{total}(x, y, t)\\) at each point on the water surface due to \\(N\\) sources is given by: \\[ D_{total}(x, y, t) = \\sum_{i=1}^{N} D_i(x, y, t) \\] where \\(D_i(x, y, t)\\) is the displacement from the \\(i^{th}\\) source. Analyze Interference Patterns Examine the resulting displacement \\(D_{total}(x, y, t)\\) as a function of position \\((x, y)\\) and time \\(t\\) . Identify regions of constructive interference (wave amplification) and destructive interference (wave cancellation). Visualization Present your findings graphically, illustrating the interference patterns for the chosen regular polygon. Python Script Below is a Python script to simulate the interference patterns formed by waves emitted from point sources placed at the vertices of a regular polygon import numpy as np import matplotlib.pyplot as plt # Constants A = 1.0 # Amplitude of the waves lambda_ = 1.0 # Wavelength k = 2 * np.pi / lambda_ # Wave number omega = 2 * np.pi # Angular frequency phi = 0 # Initial phase N = 5 # Number of vertices (for a pentagon) # Create a grid of points x = np.linspace(-5, 5, 400) y = np.linspace(-5, 5, 400) X, Y = np.meshgrid(x, y) # Calculate the positions of the sources angles = np.linspace(0, 2 * np.pi, N, endpoint=False) sources = np.array([(np.cos(angles), np.sin(angles))]).T # Initialize total displacement D_total = np.zeros(X.shape) # Calculate the displacement from each source for source in sources: r = np.sqrt((X - source[0])**2 + (Y - source[1])**2) # Distance from source D_total += A * np.sin(k * r - omega * 0 + phi) # Displacement from this source # Plotting the interference pattern plt.figure(figsize=(10, 8)) plt.contourf(X, Y, D_total, levels=50, cmap='RdBu') plt.colorbar(label='Displacement') plt.scatter(sources[:, 0], sources[:, 1], color='black', marker='o', label='Sources') plt.title('Interference Patterns on a Water Surface') plt.xlabel('X Position') plt.ylabel('Y Position') plt.axhline(0, color='black', lw=0.5, ls='--') plt.axvline(0, color='black', lw=0.5, ls='--') plt.legend() plt.show()","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#interference-patterns-on-a-water-surface","text":"","title":"Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#motivation","text":"Interference occurs when waves from different sources overlap, creating new patterns. On a water surface, this can be easily observed when ripples from different points meet, forming distinctive interference patterns. These patterns can show us how waves combine in different ways, either reinforcing each other or canceling out. Studying these patterns helps us understand wave behavior in a simple, visual way. It also allows us to explore important concepts, like the relationship between wave phase and the effects of multiple sources. This task offers a hands-on approach to learning about wave interactions and their real-world applications, making it an interesting and engaging way to dive into wave physics.","title":"Motivation"},{"location":"1%20Physics/3%20Waves/Problem_1/#task","text":"","title":"Task"},{"location":"1%20Physics/3%20Waves/Problem_1/#select-a-regular-polygon","text":"Choose a regular polygon (e.g., equilateral triangle, square, regular pentagon).","title":"Select a Regular Polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#position-the-sources","text":"Place point wave sources at the vertices of the selected polygon.","title":"Position the Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-equations","text":"The displacement of the water surface at point \\((x, y)\\) and time \\(t\\) can be described by the wave equation: $$ \\eta(x,y,t) = \\frac{A}{\\sqrt{r}} \\cdot \\cos{(kr - \\omega t + \\phi)} $$ where: - \\(D(x, y, t)\\) = displacement of the water surface at point \\((x, y)\\) and time \\(t\\) - \\(A\\) = amplitude of the wave - \\(k\\) = wave number, related to the wavelength \\(\\lambda\\) by \\(k = \\frac{2\\pi}{\\lambda}\\) - \\(\\omega\\) = angular frequency, related to the frequency \\(f\\) by \\(\\omega = 2\\pi f\\) - \\(r\\) = distance from the source to the point \\((x, y)\\) - \\(\\phi\\) = initial phase","title":"Wave Equations"},{"location":"1%20Physics/3%20Waves/Problem_1/#superposition-of-waves","text":"The total displacement \\(D_{total}(x, y, t)\\) at each point on the water surface due to \\(N\\) sources is given by: \\[ D_{total}(x, y, t) = \\sum_{i=1}^{N} D_i(x, y, t) \\] where \\(D_i(x, y, t)\\) is the displacement from the \\(i^{th}\\) source.","title":"Superposition of Waves"},{"location":"1%20Physics/3%20Waves/Problem_1/#analyze-interference-patterns","text":"Examine the resulting displacement \\(D_{total}(x, y, t)\\) as a function of position \\((x, y)\\) and time \\(t\\) . Identify regions of constructive interference (wave amplification) and destructive interference (wave cancellation).","title":"Analyze Interference Patterns"},{"location":"1%20Physics/3%20Waves/Problem_1/#visualization","text":"Present your findings graphically, illustrating the interference patterns for the chosen regular polygon.","title":"Visualization"},{"location":"1%20Physics/3%20Waves/Problem_1/#python-script","text":"Below is a Python script to simulate the interference patterns formed by waves emitted from point sources placed at the vertices of a regular polygon import numpy as np import matplotlib.pyplot as plt # Constants A = 1.0 # Amplitude of the waves lambda_ = 1.0 # Wavelength k = 2 * np.pi / lambda_ # Wave number omega = 2 * np.pi # Angular frequency phi = 0 # Initial phase N = 5 # Number of vertices (for a pentagon) # Create a grid of points x = np.linspace(-5, 5, 400) y = np.linspace(-5, 5, 400) X, Y = np.meshgrid(x, y) # Calculate the positions of the sources angles = np.linspace(0, 2 * np.pi, N, endpoint=False) sources = np.array([(np.cos(angles), np.sin(angles))]).T # Initialize total displacement D_total = np.zeros(X.shape) # Calculate the displacement from each source for source in sources: r = np.sqrt((X - source[0])**2 + (Y - source[1])**2) # Distance from source D_total += A * np.sin(k * r - omega * 0 + phi) # Displacement from this source # Plotting the interference pattern plt.figure(figsize=(10, 8)) plt.contourf(X, Y, D_total, levels=50, cmap='RdBu') plt.colorbar(label='Displacement') plt.scatter(sources[:, 0], sources[:, 1], color='black', marker='o', label='Sources') plt.title('Interference Patterns on a Water Surface') plt.xlabel('X Position') plt.ylabel('Y Position') plt.axhline(0, color='black', lw=0.5, ls='--') plt.axvline(0, color='black', lw=0.5, ls='--') plt.legend() plt.show()","title":"Python Script"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1 Simulating the Effects of the Lorentz Force Motivation: The Lorentz force plays a fundamental role in determining the motion of charged particles in electric and magnetic fields. This force is crucial in various scientific and engineering applications, including plasma physics, particle accelerators, mass spectrometers, and astrophysics. The ability to simulate the effects of this force allows us to explore complex particle trajectories and understand the behavior of charged particles under different conditions. This project will simulate these dynamics and help visualize the motion of charged particles in both 2D and 3D under various electromagnetic field configurations. By simulating the effects of the Lorentz force, we aim to: - Explore how charged particles interact with electric and magnetic fields. - Study the behavior of particles in uniform and crossed fields. - Visualize key phenomena like Larmor radius, drift velocity, and helical motion. - Investigate the effects of various parameters such as charge, mass, and field strength on particle trajectories. Task: 1. Exploration of Applications: Particle Accelerators: In particle accelerators, such as cyclotrons and linear accelerators (linacs), charged particles are accelerated using electric fields and steered by magnetic fields. The magnetic field causes the particles to move in circular or helical paths, depending on the configuration of the fields. Mass Spectrometers: Mass spectrometers utilize magnetic fields to separate charged particles based on their mass-to-charge ratio. As particles with different masses travel through a magnetic field, they experience different amounts of curvature due to the Lorentz force. This separation allows us to identify the mass of the particles. Plasma Confinement (Fusion Reactors): In fusion reactors, such as tokamaks, magnetic fields are used to confine hot plasma. The motion of charged particles within the plasma is controlled by the Lorentz force, preventing the plasma from coming into contact with the reactor walls. Relevance of Electric and Magnetic Fields: The motion of charged particles is governed by the Lorentz force: \\[ \\mathbf{F} = q(\\mathbf{E} + \\mathbf{v} \\times \\mathbf{B}) \\] Where: - $ \\mathbf{F} $ is the total force on the particle, - $ q $ is the charge of the particle, - $ \\mathbf{E} $ is the electric field, - $ \\mathbf{B} $ is the magnetic field, - $ \\mathbf{v} $ is the velocity of the particle. The electric field causes the particle to accelerate in the direction of the field, while the magnetic field influences the particle\u2019s motion perpendicular to both the velocity and the magnetic field. 2. Simulating Particle Motion: The task is to simulate the motion of a charged particle under different field configurations: Uniform Magnetic Field : The particle will move in a circular trajectory due to the force exerted by the magnetic field. The radius of this circle is determined by the particle's velocity, mass, charge, and the strength of the magnetic field. Combined Uniform Electric and Magnetic Fields : In this case, the particle will experience both electric and magnetic forces. This can lead to helical motion, where the particle moves in a spiral pattern due to the combination of acceleration from the electric field and circular motion from the magnetic field. Crossed Electric and Magnetic Fields : When the electric and magnetic fields are perpendicular to each other, the particle can experience drift motion, where it moves in a straight line, but with a constant drift velocity determined by the relative strengths of the electric and magnetic fields. We will simulate these motions for various initial conditions, and for each case, we will visualize the resulting trajectories in 2D and 3D. 3. Parameter Exploration: The simulation will allow us to explore how the following parameters affect the motion of the particle: - Field Strengths ( \\(\\mathbf{E}\\) , \\(\\mathbf{B}\\) ) : - The strength of the electric and magnetic fields directly affects the magnitude of the Lorentz force. Increasing the magnetic field strength will decrease the radius of the circular motion, while increasing the electric field strength will accelerate the particle along the direction of the field. Initial Particle Velocity ( \\(\\mathbf{v_0}\\) ) : The initial velocity of the particle will determine the speed and direction of motion. A higher velocity leads to larger Larmor radii in magnetic fields and more pronounced helical motion when both electric and magnetic fields are present. Charge and Mass of the Particle ( \\(q\\) , \\(m\\) ) : The particle\u2019s mass and charge will influence how strongly the particle responds to the applied fields. A larger mass results in a slower response to forces, while a higher charge increases the magnitude of the force experienced by the particle. 4. Visualization: The visualization will include: - 2D and 3D Plots : - We will generate plots showing the particle's trajectory under different field configurations. These plots will help illustrate how the particle moves through space in response to the applied fields. Larmor Radius and Drift Velocity : We will highlight key physical phenomena such as the Larmor radius (the radius of the circular motion in a magnetic field) and the drift velocity (the constant velocity in crossed fields). Python Implementation ```python import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D Constants q = 1.0e-19 # Charge of particle (Coulombs) m = 9.11e-31 # Mass of particle (kg) B = np.array([0, 0, 1]) # Magnetic field (Tesla) E = np.array([0, 0, 0]) # Electric field (V/m) v0 = np.array([1.0e5, 0, 0]) # Initial velocity (m/s) Time parameters dt = 1e-9 # Time step (s) T = 1e-6 # Total simulation time (s) num_steps = int(T / dt) Initialize particle position and velocity r = np.zeros((num_steps, 3)) # Position array v = np.zeros((num_steps, 3)) # Velocity array r[0] = np.array([0, 0, 0]) # Initial position v[0] = v0 # Initial velocity Lorentz force simulation (Euler method) for i in range(1, num_steps): # Compute Lorentz force: F = q(E + v x B) force = q * (E + np.cross(v[i-1], B)) # Update velocity and position using the Euler method v[i] = v[i-1] + (force / m) * dt r[i] = r[i-1] + v[i] * dt Visualization of the trajectory fig = plt.figure(figsize=(12, 6)) ax = fig.add_subplot(111, projection='3d') Plot the 3D trajectory ax.plot(r[:, 0], r[:, 1], r[:, 2], label=\"Particle trajectory\") ax.set_xlabel('X') ax.set_ylabel('Y') ax.set_zlabel('Z') ax.set_title('Trajectory of a Charged Particle in a Magnetic Field') plt.show()","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#simulating-the-effects-of-the-lorentz-force","text":"","title":"Simulating the Effects of the Lorentz Force"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#motivation","text":"The Lorentz force plays a fundamental role in determining the motion of charged particles in electric and magnetic fields. This force is crucial in various scientific and engineering applications, including plasma physics, particle accelerators, mass spectrometers, and astrophysics. The ability to simulate the effects of this force allows us to explore complex particle trajectories and understand the behavior of charged particles under different conditions. This project will simulate these dynamics and help visualize the motion of charged particles in both 2D and 3D under various electromagnetic field configurations. By simulating the effects of the Lorentz force, we aim to: - Explore how charged particles interact with electric and magnetic fields. - Study the behavior of particles in uniform and crossed fields. - Visualize key phenomena like Larmor radius, drift velocity, and helical motion. - Investigate the effects of various parameters such as charge, mass, and field strength on particle trajectories.","title":"Motivation:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#task","text":"","title":"Task:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#1-exploration-of-applications","text":"","title":"1. Exploration of Applications:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#particle-accelerators","text":"In particle accelerators, such as cyclotrons and linear accelerators (linacs), charged particles are accelerated using electric fields and steered by magnetic fields. The magnetic field causes the particles to move in circular or helical paths, depending on the configuration of the fields.","title":"Particle Accelerators:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#mass-spectrometers","text":"Mass spectrometers utilize magnetic fields to separate charged particles based on their mass-to-charge ratio. As particles with different masses travel through a magnetic field, they experience different amounts of curvature due to the Lorentz force. This separation allows us to identify the mass of the particles.","title":"Mass Spectrometers:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#plasma-confinement-fusion-reactors","text":"In fusion reactors, such as tokamaks, magnetic fields are used to confine hot plasma. The motion of charged particles within the plasma is controlled by the Lorentz force, preventing the plasma from coming into contact with the reactor walls.","title":"Plasma Confinement (Fusion Reactors):"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#relevance-of-electric-and-magnetic-fields","text":"The motion of charged particles is governed by the Lorentz force: \\[ \\mathbf{F} = q(\\mathbf{E} + \\mathbf{v} \\times \\mathbf{B}) \\] Where: - $ \\mathbf{F} $ is the total force on the particle, - $ q $ is the charge of the particle, - $ \\mathbf{E} $ is the electric field, - $ \\mathbf{B} $ is the magnetic field, - $ \\mathbf{v} $ is the velocity of the particle. The electric field causes the particle to accelerate in the direction of the field, while the magnetic field influences the particle\u2019s motion perpendicular to both the velocity and the magnetic field.","title":"Relevance of Electric and Magnetic Fields:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#2-simulating-particle-motion","text":"The task is to simulate the motion of a charged particle under different field configurations: Uniform Magnetic Field : The particle will move in a circular trajectory due to the force exerted by the magnetic field. The radius of this circle is determined by the particle's velocity, mass, charge, and the strength of the magnetic field. Combined Uniform Electric and Magnetic Fields : In this case, the particle will experience both electric and magnetic forces. This can lead to helical motion, where the particle moves in a spiral pattern due to the combination of acceleration from the electric field and circular motion from the magnetic field. Crossed Electric and Magnetic Fields : When the electric and magnetic fields are perpendicular to each other, the particle can experience drift motion, where it moves in a straight line, but with a constant drift velocity determined by the relative strengths of the electric and magnetic fields. We will simulate these motions for various initial conditions, and for each case, we will visualize the resulting trajectories in 2D and 3D.","title":"2. Simulating Particle Motion:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#3-parameter-exploration","text":"The simulation will allow us to explore how the following parameters affect the motion of the particle: - Field Strengths ( \\(\\mathbf{E}\\) , \\(\\mathbf{B}\\) ) : - The strength of the electric and magnetic fields directly affects the magnitude of the Lorentz force. Increasing the magnetic field strength will decrease the radius of the circular motion, while increasing the electric field strength will accelerate the particle along the direction of the field. Initial Particle Velocity ( \\(\\mathbf{v_0}\\) ) : The initial velocity of the particle will determine the speed and direction of motion. A higher velocity leads to larger Larmor radii in magnetic fields and more pronounced helical motion when both electric and magnetic fields are present. Charge and Mass of the Particle ( \\(q\\) , \\(m\\) ) : The particle\u2019s mass and charge will influence how strongly the particle responds to the applied fields. A larger mass results in a slower response to forces, while a higher charge increases the magnitude of the force experienced by the particle.","title":"3. Parameter Exploration:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#4-visualization","text":"The visualization will include: - 2D and 3D Plots : - We will generate plots showing the particle's trajectory under different field configurations. These plots will help illustrate how the particle moves through space in response to the applied fields. Larmor Radius and Drift Velocity : We will highlight key physical phenomena such as the Larmor radius (the radius of the circular motion in a magnetic field) and the drift velocity (the constant velocity in crossed fields).","title":"4. Visualization:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#_1","text":"","title":""},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#python-implementation","text":"```python import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D","title":"Python Implementation"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#constants","text":"q = 1.0e-19 # Charge of particle (Coulombs) m = 9.11e-31 # Mass of particle (kg) B = np.array([0, 0, 1]) # Magnetic field (Tesla) E = np.array([0, 0, 0]) # Electric field (V/m) v0 = np.array([1.0e5, 0, 0]) # Initial velocity (m/s)","title":"Constants"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#time-parameters","text":"dt = 1e-9 # Time step (s) T = 1e-6 # Total simulation time (s) num_steps = int(T / dt)","title":"Time parameters"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#initialize-particle-position-and-velocity","text":"r = np.zeros((num_steps, 3)) # Position array v = np.zeros((num_steps, 3)) # Velocity array r[0] = np.array([0, 0, 0]) # Initial position v[0] = v0 # Initial velocity","title":"Initialize particle position and velocity"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#lorentz-force-simulation-euler-method","text":"for i in range(1, num_steps): # Compute Lorentz force: F = q(E + v x B) force = q * (E + np.cross(v[i-1], B)) # Update velocity and position using the Euler method v[i] = v[i-1] + (force / m) * dt r[i] = r[i-1] + v[i] * dt","title":"Lorentz force simulation (Euler method)"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#visualization-of-the-trajectory","text":"fig = plt.figure(figsize=(12, 6)) ax = fig.add_subplot(111, projection='3d')","title":"Visualization of the trajectory"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#plot-the-3d-trajectory","text":"ax.plot(r[:, 0], r[:, 1], r[:, 2], label=\"Particle trajectory\") ax.set_xlabel('X') ax.set_ylabel('Y') ax.set_zlabel('Z') ax.set_title('Trajectory of a Charged Particle in a Magnetic Field') plt.show()","title":"Plot the 3D trajectory"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}