{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation To derive the governing equations of motion for a projectile, we start with Newton\u2019s second law in a vacuum (no air resistance). The motion occurs in two dimensions: horizontal (x) and vertical (y). The only force acting is gravity, with acceleration \\( g \\) , directed downward. Equations of Motion Horizontal motion : No acceleration, so: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ where \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, and \\( t \\) is time. - Vertical motion : Acceleration is \\( -g \\) , so: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Solving for Time of Flight The projectile returns to the ground when \\( y(t) = 0 \\) : $$ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Factorizing: $$ t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\( t = 0 \\) (launch) or: $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This is the time of flight. Range Equation Substitute the time of flight into the horizontal equation: $$ R = x\\left(\\frac{2 v_0 \\sin(\\theta)}{g}\\right) = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} = \\frac{2 v_0^2 \\sin(\\theta) \\cos(\\theta)}{g} $$ Using the trigonometric identity \\( \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This is the range as a function of the angle of projection. Different initial conditions ( \\( v_0 \\) , \\( g \\) ) yield a family of solutions, scaling the range accordingly. 2. Analysis of the Range The range \\( R \\) depends on \\( \\theta \\) through \\( \\sin(2\\theta) \\) : - \\( R \\) is maximized when \\( \\sin(2\\theta) = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) , so \\( \\theta = 45^\\circ \\) . - \\( R = 0 \\) when \\( \\sin(2\\theta) = 0 \\) , i.e., \\( \\theta = 0^\\circ \\) or \\( 90^\\circ \\) . - The relationship is symmetric about \\( 45^\\circ \\) (e.g., \\( \\theta = 30^\\circ \\) and \\( 60^\\circ \\) give the same range). Influence of Other Parameters Initial Velocity ( \\( v_0 \\) ) : \\( R \\propto v_0^2 \\) , so doubling \\( v_0 \\) quadruples the range. Gravitational Acceleration ( \\( g \\) ) : \\( R \\propto 1/g \\) , so a smaller \\( g \\) (e.g., on the Moon) increases the range. 3. Practical Applications This model assumes a flat surface and no air resistance, but it can be adapted: - Uneven Terrain : Adjust the landing height in the vertical equation, solving for \\( t \\) when \\( y(t) = h \\) . This complicates the range formula. - Air Resistance : Introduce a drag force proportional to velocity (e.g., \\( F_d = -k v \\) ), turning the equations into nonlinear differential equations, typically solved numerically. - Real-World Examples : Artillery, sports (e.g., golf, soccer), or space launches (with modified \\( g \\) ). import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # gravitational acceleration (m/s^2) Function to calculate range def calculate_range(v0, theta_deg): theta_rad = np.radians(theta_deg) # Convert degrees to radians R = (v0**2 * np.sin(2 * theta_rad)) / g return R Angles from 0 to 90 degrees theta = np.linspace(0, 90, 181) # 181 points for smooth curve Different initial velocities v0_values = [10, 20, 30] # m/s Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: R = calculate_range(v0, theta) plt.plot(theta, R, label=f'v0 = {v0} m/s') Formatting the plot plt.title('Range vs Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"To derive the governing equations of motion for a projectile, we start with Newton\u2019s second law in a vacuum (no air resistance). The motion occurs in two dimensions: horizontal (x) and vertical (y). The only force acting is gravity, with acceleration \\( g \\) , directed downward.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"Horizontal motion : No acceleration, so: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ where \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, and \\( t \\) is time. - Vertical motion : Acceleration is \\( -g \\) , so: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solving-for-time-of-flight","text":"The projectile returns to the ground when \\( y(t) = 0 \\) : $$ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Factorizing: $$ t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\( t = 0 \\) (launch) or: $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This is the time of flight.","title":"Solving for Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"Substitute the time of flight into the horizontal equation: $$ R = x\\left(\\frac{2 v_0 \\sin(\\theta)}{g}\\right) = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} = \\frac{2 v_0^2 \\sin(\\theta) \\cos(\\theta)}{g} $$ Using the trigonometric identity \\( \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This is the range as a function of the angle of projection. Different initial conditions ( \\( v_0 \\) , \\( g \\) ) yield a family of solutions, scaling the range accordingly.","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\( R \\) depends on \\( \\theta \\) through \\( \\sin(2\\theta) \\) : - \\( R \\) is maximized when \\( \\sin(2\\theta) = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) , so \\( \\theta = 45^\\circ \\) . - \\( R = 0 \\) when \\( \\sin(2\\theta) = 0 \\) , i.e., \\( \\theta = 0^\\circ \\) or \\( 90^\\circ \\) . - The relationship is symmetric about \\( 45^\\circ \\) (e.g., \\( \\theta = 30^\\circ \\) and \\( 60^\\circ \\) give the same range).","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-other-parameters","text":"Initial Velocity ( \\( v_0 \\) ) : \\( R \\propto v_0^2 \\) , so doubling \\( v_0 \\) quadruples the range. Gravitational Acceleration ( \\( g \\) ) : \\( R \\propto 1/g \\) , so a smaller \\( g \\) (e.g., on the Moon) increases the range.","title":"Influence of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model assumes a flat surface and no air resistance, but it can be adapted: - Uneven Terrain : Adjust the landing height in the vertical equation, solving for \\( t \\) when \\( y(t) = h \\) . This complicates the range formula. - Air Resistance : Introduce a drag force proportional to velocity (e.g., \\( F_d = -k v \\) ), turning the equations into nonlinear differential equations, typically solved numerically. - Real-World Examples : Artillery, sports (e.g., golf, soccer), or space launches (with modified \\( g \\) ). import numpy as np import matplotlib.pyplot as plt","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # gravitational acceleration (m/s^2)","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-calculate-range","text":"def calculate_range(v0, theta_deg): theta_rad = np.radians(theta_deg) # Convert degrees to radians R = (v0**2 * np.sin(2 * theta_rad)) / g return R","title":"Function to calculate range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#angles-from-0-to-90-degrees","text":"theta = np.linspace(0, 90, 181) # 181 points for smooth curve","title":"Angles from 0 to 90 degrees"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-initial-velocities","text":"v0_values = [10, 20, 30] # m/s","title":"Different initial velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plotting","text":"plt.figure(figsize=(10, 6)) for v0 in v0_values: R = calculate_range(v0, theta) plt.plot(theta, R, label=f'v0 = {v0} m/s')","title":"Plotting"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#formatting-the-plot","text":"plt.title('Range vs Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Formatting the plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Motivation The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping, restoring forces, and external driving forces. By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including resonance, chaos, and quasiperiodic behavior. These phenomena serve as a foundation for understanding complex real-world systems, such as driven oscillators, climate systems, and mechanical structures under periodic stress. Adding forcing introduces new parameters, such as the amplitude and frequency of the external force, which significantly affect the pendulum's behavior. By systematically varying these parameters, a diverse class of solutions can be observed, including synchronized oscillations, chaotic motion, and resonance phenomena. These behaviors not only highlight fundamental physics principles but also provide insights into engineering applications such as energy harvesting, vibration isolation, and mechanical resonance. : Theoretical Foundation Differential Equation The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin(\\theta) = F\\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient (s\u207b\u00b9) - \\(g\\) : Gravitational acceleration (m/s\u00b2) - \\(L\\) : Pendulum length (m) - \\(F\\) : Driving force amplitude (s\u207b\u00b2) - \\(\\omega\\) : Driving frequency (rad/s) Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2\\theta = F\\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. This is a linear second-order differential equation with a harmonic forcing term. General Solution The general solution to this differential equation consists of two parts: 1. Homogeneous solution (transient response): $$ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) $$ where \\(\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\) . Particular solution (steady-state response): $$ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) $$ where $$ A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} $$ and $$ \\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right). $$ Resonance Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . For light damping ( \\(b \\ll \\omega_0\\) ), the amplitude \\(A_p\\) peaks sharply near \\(\\omega = \\omega_0\\) , amplifying the system's energy significantly. Analysis of Dynamics Parameter Effects Damping Coefficient (b): Higher \\(b\\) reduces oscillation amplitude and suppresses chaos, stabilizing the system. Driving Amplitude (F): Larger \\(F\\) can push the system from periodic to chaotic motion. Driving Frequency ( \\(\\omega\\) ): Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , the system may exhibit quasiperiodic or chaotic behavior. Transition to Chaos For large \\(F\\) or specific \\(\\omega\\) , the nonlinear term \\(\\sin(\\theta)\\) dominates, leading to chaotic motion. This transition is evident in phase portraits and Poincar\u00e9 sections, where trajectories shift from closed loops (periodic) to scattered points (chaotic). Practical Applications Energy Harvesting: Oscillatory motion in forced pendulums can be converted to electrical energy. Suspension Bridges: Damping and forcing model wind-induced vibrations. Oscillating Circuits: Analogous to driven RLC circuits, where resonance and damping play similar roles. Implementation Below is a Python script simulating the forced damped pendulum using the 4th-order Runge-Kutta (RK4) method. It includes visualizations of motion, phase portraits, and Poincar\u00e9 sections. Parameters Gravitational acceleration: \\[ g = 9.81 \\text{ m/s}^2 \\] Pendulum length: \\[ L = 1.0 \\text{ m} \\] Damping coefficient: \\[ b = 0.5 \\text{ s}^{-1} \\] Driving amplitude: \\[ F = 1.2 \\text{ s}^{-2} \\] Driving frequency: \\[ \\omega = \\frac{2}{3} \\text{ rad/s} \\] Natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] Differential Equation The equation governing the forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\] Differential Equation and Simulation The forced damped pendulum follows the equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\] import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Damped forced pendulum differential equation. import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Computes the derivatives for the forced damped pendulum. Parameters: state (tuple): (theta, theta_dot) t (float): time b (float): damping coefficient omega_0 (float): natural frequency F (float): forcing amplitude omega (float): forcing frequency Returns: tuple: (dtheta_dt, dtheta_dot_dt) \"\"\" theta, theta_dot = state dtheta_dt = theta_dot # Angular velocity dtheta_dot_dt = -b * theta_dot - omega_0**2 * np.sin(theta) + F * np.cos(omega * t) return dtheta_dt, dtheta_dot_dt Example usage (and showcasing the equation): The forced damped pendulum follows the equation: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) $$ where: - theta is the angle of the pendulum - b is the damping coefficient - omega_0 is the natural frequency - F is the forcing amplitude - omega is the forcing frequency - t is time. Example parameters: b = 0.25 omega_0 = 1.0 F = 0.3 omega = 1.5 Example initial conditions: initial_state = (np.pi / 4, 0.0) # (theta, theta_dot) Example time: t = 0.0 Example derivative calculation: dtheta_dt, dtheta_dot_dt = pendulum_deriv(initial_state, t, b, omega_0, F, omega) print(f\"dtheta/dt: {dtheta_dt}\") print(f\"d^2theta/dt^2: {dtheta_dot_dt}\")","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping, restoring forces, and external driving forces. By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including resonance, chaos, and quasiperiodic behavior. These phenomena serve as a foundation for understanding complex real-world systems, such as driven oscillators, climate systems, and mechanical structures under periodic stress. Adding forcing introduces new parameters, such as the amplitude and frequency of the external force, which significantly affect the pendulum's behavior. By systematically varying these parameters, a diverse class of solutions can be observed, including synchronized oscillations, chaotic motion, and resonance phenomena. These behaviors not only highlight fundamental physics principles but also provide insights into engineering applications such as energy harvesting, vibration isolation, and mechanical resonance.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"","title":": Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin(\\theta) = F\\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient (s\u207b\u00b9) - \\(g\\) : Gravitational acceleration (m/s\u00b2) - \\(L\\) : Pendulum length (m) - \\(F\\) : Driving force amplitude (s\u207b\u00b2) - \\(\\omega\\) : Driving frequency (rad/s)","title":"Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2\\theta = F\\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. This is a linear second-order differential equation with a harmonic forcing term.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#general-solution","text":"The general solution to this differential equation consists of two parts: 1. Homogeneous solution (transient response): $$ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) $$ where \\(\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\) . Particular solution (steady-state response): $$ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) $$ where $$ A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} $$ and $$ \\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right). $$","title":"General Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . For light damping ( \\(b \\ll \\omega_0\\) ), the amplitude \\(A_p\\) peaks sharply near \\(\\omega = \\omega_0\\) , amplifying the system's energy significantly.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"","title":"Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping Coefficient (b): Higher \\(b\\) reduces oscillation amplitude and suppresses chaos, stabilizing the system. Driving Amplitude (F): Larger \\(F\\) can push the system from periodic to chaotic motion. Driving Frequency ( \\(\\omega\\) ): Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , the system may exhibit quasiperiodic or chaotic behavior.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"For large \\(F\\) or specific \\(\\omega\\) , the nonlinear term \\(\\sin(\\theta)\\) dominates, leading to chaotic motion. This transition is evident in phase portraits and Poincar\u00e9 sections, where trajectories shift from closed loops (periodic) to scattered points (chaotic).","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Energy Harvesting: Oscillatory motion in forced pendulums can be converted to electrical energy. Suspension Bridges: Damping and forcing model wind-induced vibrations. Oscillating Circuits: Analogous to driven RLC circuits, where resonance and damping play similar roles.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implementation","text":"Below is a Python script simulating the forced damped pendulum using the 4th-order Runge-Kutta (RK4) method. It includes visualizations of motion, phase portraits, and Poincar\u00e9 sections.","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"Gravitational acceleration: \\[ g = 9.81 \\text{ m/s}^2 \\] Pendulum length: \\[ L = 1.0 \\text{ m} \\] Damping coefficient: \\[ b = 0.5 \\text{ s}^{-1} \\] Driving amplitude: \\[ F = 1.2 \\text{ s}^{-2} \\] Driving frequency: \\[ \\omega = \\frac{2}{3} \\text{ rad/s} \\] Natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\]","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation_1","text":"The equation governing the forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\]","title":"Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation-and-simulation","text":"The forced damped pendulum follows the equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) \\] import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Damped forced pendulum differential equation. import numpy as np def pendulum_deriv(state, t, b, omega_0, F, omega): \"\"\" Computes the derivatives for the forced damped pendulum. Parameters: state (tuple): (theta, theta_dot) t (float): time b (float): damping coefficient omega_0 (float): natural frequency F (float): forcing amplitude omega (float): forcing frequency Returns: tuple: (dtheta_dt, dtheta_dot_dt) \"\"\" theta, theta_dot = state dtheta_dt = theta_dot # Angular velocity dtheta_dot_dt = -b * theta_dot - omega_0**2 * np.sin(theta) + F * np.cos(omega * t) return dtheta_dt, dtheta_dot_dt","title":"Differential Equation and Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-usage-and-showcasing-the-equation","text":"","title":"Example usage (and showcasing the equation):"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#the-forced-damped-pendulum-follows-the-equation","text":"","title":"The forced damped pendulum follows the equation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#fracd2thetadt2-b-fracdthetadt-omega_02-sintheta-f-cosomega-t","text":"","title":"$$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = F \\cos(\\omega t) $$"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#where","text":"","title":"where:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-theta-is-the-angle-of-the-pendulum","text":"","title":"- theta is the angle of the pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-b-is-the-damping-coefficient","text":"","title":"- b is the damping coefficient"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-omega_0-is-the-natural-frequency","text":"","title":"- omega_0 is the natural frequency"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-f-is-the-forcing-amplitude","text":"","title":"- F is the forcing amplitude"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-omega-is-the-forcing-frequency","text":"","title":"- omega is the forcing frequency"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-t-is-time","text":"","title":"- t is time."},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-parameters","text":"b = 0.25 omega_0 = 1.0 F = 0.3 omega = 1.5","title":"Example parameters:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-initial-conditions","text":"initial_state = (np.pi / 4, 0.0) # (theta, theta_dot)","title":"Example initial conditions:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-time","text":"t = 0.0","title":"Example time:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#example-derivative-calculation","text":"dtheta_dt, dtheta_dot_dt = pendulum_deriv(initial_state, t, b, omega_0, F, omega) print(f\"dtheta/dt: {dtheta_dt}\") print(f\"d^2theta/dt^2: {dtheta_dot_dt}\")","title":"Example derivative calculation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius Motivation Kepler's Third Law states that the square of the orbital period (T) of a planet is proportional to the cube of the semi-major axis (r) of its orbit. Mathematically: \\[ T^2 \\propto r^3 \\] This relationship is fundamental in celestial mechanics, allowing astronomers to determine planetary motions, masses, and distances within the solar system and beyond. Mathematical Derivation Using Newton's law of gravitation and centripetal force: \\[ F = \\frac{G M m}{r^2} $$ $$ F = \\frac{m v^2}{r} \\] Equating both forces: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Since orbital velocity is given by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\frac{G M}{r^2} = \\frac{(2\\pi r / T)^2}{r} \\] Rearranging: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This confirms Kepler's Third Law. Python Simulation Below is a Python script to simulate circular orbits and verify Kepler\u2019s Third Law using numerical integration. ```python import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants M = 1.989e30 # Mass of Sun (kg) AU = 1.496e11 # Astronomical Unit (m) T_Earth = 365.25 * 24 * 3600 # Orbital period of Earth (s) # Orbital Radii (in AU converted to meters) radii = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.2, 30.1]) * AU # Compute theoretical periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to Earth years periods_years = periods / T_Earth # Plot results plt.figure(figsize=(8,6)) plt.loglog(radii/AU, periods_years, 'o-', label=\"Planets\") plt.xlabel(\"Orbital Radius (AU)\") plt.ylabel(\"Orbital Period (Earth Years)\") plt.title(\"Kepler's Third Law: T^2 vs R^3\") plt.grid(True, which=\"both\", linestyle=\"--\", alpha=0.6) plt.legend() plt.show() ```markdown Discussion The log-log plot of orbital period vs. radius confirms the cubic relationship of Kepler\u2019s law. This law is essential for calculating planetary masses, distances, and even predicting exoplanetary systems. For elliptical orbits, the semi-major axis replaces the orbital radius in the equation. Kepler\u2019s laws also play a critical role in understanding satellite orbits and space mission planning. Conclusion Kepler\u2019s Third Law is a fundamental principle that provides deep insights into celestial mechanics. Our computational simulation confirms the theoretical relationship and demonstrates its practical application in astronomy.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law states that the square of the orbital period (T) of a planet is proportional to the cube of the semi-major axis (r) of its orbit. Mathematically: \\[ T^2 \\propto r^3 \\] This relationship is fundamental in celestial mechanics, allowing astronomers to determine planetary motions, masses, and distances within the solar system and beyond.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#mathematical-derivation","text":"Using Newton's law of gravitation and centripetal force: \\[ F = \\frac{G M m}{r^2} $$ $$ F = \\frac{m v^2}{r} \\] Equating both forces: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Since orbital velocity is given by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\frac{G M}{r^2} = \\frac{(2\\pi r / T)^2}{r} \\] Rearranging: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This confirms Kepler's Third Law.","title":"Mathematical Derivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation","text":"Below is a Python script to simulate circular orbits and verify Kepler\u2019s Third Law using numerical integration. ```python import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants M = 1.989e30 # Mass of Sun (kg) AU = 1.496e11 # Astronomical Unit (m) T_Earth = 365.25 * 24 * 3600 # Orbital period of Earth (s) # Orbital Radii (in AU converted to meters) radii = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.2, 30.1]) * AU # Compute theoretical periods using Kepler's Third Law periods = np.sqrt((4 * np.pi**2 * radii**3) / (G * M)) # Convert periods to Earth years periods_years = periods / T_Earth # Plot results plt.figure(figsize=(8,6)) plt.loglog(radii/AU, periods_years, 'o-', label=\"Planets\") plt.xlabel(\"Orbital Radius (AU)\") plt.ylabel(\"Orbital Period (Earth Years)\") plt.title(\"Kepler's Third Law: T^2 vs R^3\") plt.grid(True, which=\"both\", linestyle=\"--\", alpha=0.6) plt.legend() plt.show() ```markdown","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#discussion","text":"The log-log plot of orbital period vs. radius confirms the cubic relationship of Kepler\u2019s law. This law is essential for calculating planetary masses, distances, and even predicting exoplanetary systems. For elliptical orbits, the semi-major axis replaces the orbital radius in the equation. Kepler\u2019s laws also play a critical role in understanding satellite orbits and space mission planning.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler\u2019s Third Law is a fundamental principle that provides deep insights into celestial mechanics. Our computational simulation confirms the theoretical relationship and demonstrates its practical application in astronomy.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities Motivation Escape velocity is the minimum speed required for an object to break free from a celestial body's gravitational influence without further propulsion. Expanding on this, the first, second, and third cosmic velocities define the thresholds for stable orbits, escaping a planet, and leaving a star system. These velocities are fundamental for space exploration, enabling satellite launches, interplanetary travel, and potential interstellar missions. Definitions First Cosmic Velocity (Orbital Velocity) The velocity required to maintain a stable circular orbit around a celestial body. Given by: $ v_1 = \\sqrt{\\frac{GM}{r}} $ Second Cosmic Velocity (Escape Velocity) The velocity needed to escape a celestial body's gravitational pull. Derived from energy conservation: $ v_2 = \\sqrt{2 \\frac{GM}{r}} = \\sqrt{2} v_1 $ Third Cosmic Velocity (Interstellar Escape Velocity) The velocity required to leave a star system, overcoming the gravitational pull of both the planet and the star. Dependent on the Sun\u2019s influence at planetary distances: $ v_3 = \\sqrt{2} \\cdot v_{escape, planet} + v_{orbit, star} $ Python Simulation The following Python script calculates and visualizes these velocities for Earth, Mars, and Jupiter. ```python import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants bodies = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.389e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.9911e7}, } # Compute velocities velocities = {} for body, data in bodies.items(): M, R = data[\"mass\"], data[\"radius\"] v1 = np.sqrt(G * M / R) # First Cosmic Velocity v2 = np.sqrt(2) * v1 # Second Cosmic Velocity v3 = np.sqrt(2) * v2 # Approximate Third Cosmic Velocity velocities[body] = (v1, v2, v3) # Plot results labels = list(bodies.keys()) x = np.arange(len(labels)) v1_vals, v2_vals, v3_vals = zip(*velocities.values()) plt.figure(figsize=(10, 6)) plt.bar(x - 0.2, v1_vals, 0.2, label=\"First Cosmic Velocity\") plt.bar(x, v2_vals, 0.2, label=\"Second Cosmic Velocity\") plt.bar(x + 0.2, v3_vals, 0.2, label=\"Third Cosmic Velocity\") plt.xticks(x, labels) plt.ylabel(\"Velocity (m/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid(True, linestyle=\"--\", alpha=0.6) plt.show() ```markdown Discussion First Cosmic Velocity determines whether an object can stay in orbit around a planet. Second Cosmic Velocity is crucial for missions leaving planetary surfaces. Third Cosmic Velocity is necessary for interstellar travel and escaping the Sun's gravity. These calculations are vital for spacecraft trajectory planning and deep-space exploration. Conclusion Understanding cosmic velocities is essential for space exploration. From launching satellites to interplanetary and interstellar travel, these velocities define the fundamental thresholds required to move","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"Escape velocity is the minimum speed required for an object to break free from a celestial body's gravitational influence without further propulsion. Expanding on this, the first, second, and third cosmic velocities define the thresholds for stable orbits, escaping a planet, and leaving a star system. These velocities are fundamental for space exploration, enabling satellite launches, interplanetary travel, and potential interstellar missions.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions","text":"First Cosmic Velocity (Orbital Velocity) The velocity required to maintain a stable circular orbit around a celestial body. Given by: $ v_1 = \\sqrt{\\frac{GM}{r}} $ Second Cosmic Velocity (Escape Velocity) The velocity needed to escape a celestial body's gravitational pull. Derived from energy conservation: $ v_2 = \\sqrt{2 \\frac{GM}{r}} = \\sqrt{2} v_1 $ Third Cosmic Velocity (Interstellar Escape Velocity) The velocity required to leave a star system, overcoming the gravitational pull of both the planet and the star. Dependent on the Sun\u2019s influence at planetary distances: $ v_3 = \\sqrt{2} \\cdot v_{escape, planet} + v_{orbit, star} $","title":"Definitions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-simulation","text":"The following Python script calculates and visualizes these velocities for Earth, Mars, and Jupiter. ```python import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants bodies = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.389e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.9911e7}, } # Compute velocities velocities = {} for body, data in bodies.items(): M, R = data[\"mass\"], data[\"radius\"] v1 = np.sqrt(G * M / R) # First Cosmic Velocity v2 = np.sqrt(2) * v1 # Second Cosmic Velocity v3 = np.sqrt(2) * v2 # Approximate Third Cosmic Velocity velocities[body] = (v1, v2, v3) # Plot results labels = list(bodies.keys()) x = np.arange(len(labels)) v1_vals, v2_vals, v3_vals = zip(*velocities.values()) plt.figure(figsize=(10, 6)) plt.bar(x - 0.2, v1_vals, 0.2, label=\"First Cosmic Velocity\") plt.bar(x, v2_vals, 0.2, label=\"Second Cosmic Velocity\") plt.bar(x + 0.2, v3_vals, 0.2, label=\"Third Cosmic Velocity\") plt.xticks(x, labels) plt.ylabel(\"Velocity (m/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid(True, linestyle=\"--\", alpha=0.6) plt.show() ```markdown","title":"Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#discussion","text":"First Cosmic Velocity determines whether an object can stay in orbit around a planet. Second Cosmic Velocity is crucial for missions leaving planetary surfaces. Third Cosmic Velocity is necessary for interstellar travel and escaping the Sun's gravity. These calculations are vital for spacecraft trajectory planning and deep-space exploration.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#conclusion","text":"Understanding cosmic velocities is essential for space exploration. From launching satellites to interplanetary and interstellar travel, these velocities define the fundamental thresholds required to move","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}